name: 'Docureco Agent: Update Baseline Map'

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository name (owner/repo)'
        required: true
        default: 'mhelmih/docureco'
      branch:
        description: 'Branch name to analyze'
        required: true
        default: 'main'
      since:
        description: 'Update since commit hash or date (optional)'
        required: false
        default: ''
  schedule:
    # Run weekly on Sundays at 3 AM UTC to keep baseline maps current
    - cron: '0 3 * * 0'

env:
  # LLM Configuration
  GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
  GROK_BASE_URL: ${{ secrets.GROK_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # LangSmith Configuration
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  
  # Database Configuration
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  
  # GitHub Configuration
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-baseline-map:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'agent/requirements.txt'
    
    - name: Set up Node.js (for Repomix)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Repomix
      run: |
        npm install -g repomix
        repomix --version
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r agent/requirements.txt
    
    - name: Determine update parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "mode=scheduled" >> $GITHUB_OUTPUT
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "branch=main" >> $GITHUB_OUTPUT
          echo "since=1 week ago" >> $GITHUB_OUTPUT
        else
          echo "mode=manual" >> $GITHUB_OUTPUT
          echo "repository=${{ github.event.inputs.repository }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          echo "since=${{ github.event.inputs.since }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate inputs (manual trigger only)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Repository: ${{ github.event.inputs.repository }}"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Since: ${{ github.event.inputs.since }}"
        
        # Validate repository format
        if [[ ! "${{ github.event.inputs.repository }}" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$ ]]; then
          echo "Error: Repository must be in format 'owner/repo'"
          exit 1
        fi
    
    - name: Update baseline traceability map
      env:
        LOG_LEVEL: 'INFO'
      run: |
        if [ -n "${{ steps.params.outputs.since }}" ]; then
          python -m agent baseline-map-updater \
            ${{ steps.params.outputs.repository }} \
            --branch ${{ steps.params.outputs.branch }} \
            --since "${{ steps.params.outputs.since }}" \
            --log-level INFO
        else
          python -m agent baseline-map-updater \
            ${{ steps.params.outputs.repository }} \
            --branch ${{ steps.params.outputs.branch }} \
            --log-level INFO
        fi
    
    - name: Upload update artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: baseline-map-update-${{ github.run_id }}
        path: |
          agent/logs/
          agent/output/
          *.log
        retention-days: 30
    
    - name: Create summary
      if: always()
      run: |
        echo "## ðŸ”„ Baseline Map Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "**Trigger:** Scheduled (Weekly)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ steps.params.outputs.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ steps.params.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Trigger:** Manual" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ github.event.inputs.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.event.inputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Since:** \`${{ github.event.inputs.since || 'Not specified' }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Workflow Details" >> $GITHUB_STEP_SUMMARY
        echo "- Started by: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“š About Baseline Map Updates" >> $GITHUB_STEP_SUMMARY
        echo "Baseline map updates analyze repository changes and update traceability" >> $GITHUB_STEP_SUMMARY
        echo "relationships between requirements, design elements, and code components." >> $GITHUB_STEP_SUMMARY 