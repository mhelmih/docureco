name: 'Docureco Agent: Update Baseline Map on Merge'

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to analyze'
        required: true
        default: 'main'
      commit_sha:
        description: 'Commit SHA to analyze'
        required: true

env:
  # LLM Configuration
  GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
  GROK_BASE_URL: ${{ secrets.GROK_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  GOOGLE_BASE_URL: ${{ vars.GOOGLE_BASE_URL }}
  
  DOCURECO_LLM_PROVIDER: ${{ vars.DOCURECO_LLM_PROVIDER }}
  DOCURECO_LLM_MODEL: ${{ vars.DOCURECO_LLM_MODEL }}
  DOCURECO_LLM_TEMPERATURE: ${{ vars.DOCURECO_LLM_TEMPERATURE }}
  DOCURECO_LLM_MAX_TOKENS: ${{ vars.DOCURECO_LLM_MAX_TOKENS }}
  DOCURECO_LLM_MAX_RETRIES: ${{ vars.DOCURECO_LLM_MAX_RETRIES }}
  DOCURECO_LLM_TIMEOUT: ${{ vars.DOCURECO_LLM_TIMEOUT }}

  MAX_CONCURRENT_OPERATIONS: ${{ vars.MAX_CONCURRENT_OPERATIONS }}

  # LangSmith Configuration
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  
  # Database Configuration
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  
  # GitHub Configuration
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Logging
  LOG_LEVEL: ${{ vars.LOG_LEVEL || 'INFO' }}

jobs:
  update-baseline-map:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'agent/requirements.txt'
    
    - name: Set up Node.js (for Repomix)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Repomix
      run: |
        npm install -g repomix
        repomix --version
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r agent/requirements.txt
    
    - name: Set target branch and commit SHA
      id: set_vars
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_OUTPUT
        else
          echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Update baseline traceability map
      env:
        LOG_LEVEL: 'INFO'
      run: |
        python -m agent baseline-map-updater \
          --repository ${{ github.repository }} \
          --branch ${{ steps.set_vars.outputs.branch }} \
          --commit_sha ${{ steps.set_vars.outputs.commit_sha }}

    - name: Sanitize artifact name
      run: |
        repo_name="${{ github.repository }}"
        branch_name="${{ steps.set_vars.outputs.branch }}"
        echo "ARTIFACT_NAME=baseline-map-update-${repo_name//\//_}-${branch_name//\//_}" >> $GITHUB_ENV
    
    - name: Upload update artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          agent/logs/
          agent/output/
          *.log
        retention-days: 30
    
    - name: Create summary
      if: always()
      run: |
        echo "## ðŸ”„ Baseline Map Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "**Trigger:** Push to \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "**Trigger:** Merged PR #${{ github.event.number }} into \`${{ steps.set_vars.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Trigger:** Manual" >> $GITHUB_STEP_SUMMARY
        fi

        echo "**Repository:** \`${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ steps.set_vars.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Workflow Details" >> $GITHUB_STEP_SUMMARY
        echo "- Committer: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“š About Baseline Map Updates" >> $GITHUB_STEP_SUMMARY
        echo "This workflow analyzes the latest commit to update traceability" >> $GITHUB_STEP_SUMMARY
        echo "relationships between requirements, design, and code." >> $GITHUB_STEP_SUMMARY 